let falcon = import! "scripts/falcon.glu"
let hook = import! "scripts/hook.glu"
let list = import! "std/list.glu"
let { List } = list
let string = import! std.string
let (++) = string.monoid.semigroup.append
let symdriver = import! "scripts/symdriver.glu"
let {SymDriver} = symdriver
let {ok_err, show_int, some_err} = import! "scripts/utility.glu"


let getenv_hook driver : SymDriver -> Option (List SymDriver) =
  // We need to get the string passed to getenv
  let a0 = symdriver.get_scalar_constant_value driver "$a0"
  let a0 = some_err a0 "Failed to get $a0 for getenv"
  let variable_name = symdriver.get_string driver a0
  let variable_name =
    some_err variable_name "Failed get variable name for getenv"

  let s = "Call to getenv(\""
  let s = string.append s variable_name
  let s = string.append s "\")"
  falcon.println s

  // Create a new symbolic string
  let symvar_name = "GETENV_" ++ variable_name

  let (driver, address) =
    match symdriver.get_symbolic_string driver symvar_name with
    | Some address -> (driver, address)
    | None -> symdriver.make_symbolic_string driver symvar_name 64

  // Set the return value to the address of our symbolic string
  let v0 = falcon.il.constant.new address 32
  let v0 = falcon.il.expression.constant v0

  let driver = symdriver.set_scalar driver "$v0" v0

  // Jump to the link register
  let ra = symdriver.get_scalar_constant_value driver "$ra"
  let ra = some_err ra "Failed to get $ra for getenv"

  match symdriver.set_location_address driver ra with
  | Some driver -> Some (Cons driver Nil)
  | None -> None


let gather_hook driver : SymDriver -> Option (List SymDriver) =
  let ra = symdriver.get_scalar_constant_value driver "$ra"
  let ra = some_err ra "Failed to get $ra for gather_hook"

  match symdriver.drive_and_merge driver ra 256 with
  | Some driver -> Some (Cons driver Nil)
  | None -> None


let libc_hooks binary
  : LoaderElfLinker ->
    List hook.Hook =
  let hooks = Nil
  let hooks = hook.add_hook_name hooks binary "getenv" getenv_hook
  let hooks = hook.add_hook_name hooks binary "strrchr" gather_hook
  let hooks = hook.add_hook_name hooks binary "strchr" gather_hook
  let hooks = hook.add_hook_name hooks binary "strlen" gather_hook
  hooks

{
  libc_hooks
}