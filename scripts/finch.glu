let finch_prim = import! "finch_prim"

{
    drive_and_merge = finch_prim.drive_and_merge,
    solve = finch_prim.solve,

    driver = {
        add_path_constraint = finch_prim.driver_add_path_constraint,
        address = finch_prim.driver_address,
        load = finch_prim.driver_load,
        location = finch_prim.driver_location,
        merge = finch_prim.driver_merge,
        new = finch_prim.driver_new,
        program = finch_prim.driver_program,
        set_location = finch_prim.driver_set_location,
        set_scalar = finch_prim.driver_set_scalar,
        state = finch_prim.driver_state,
        step = finch_prim.driver_step,
        store = finch_prim.driver_store
    },

    platform = {
        mips_linux = {
            initialize = finch_prim.platform_mips_linux_initialize,
            standard_load = finch_prim.platform_mips_standard_load
        }
    },

    state = {
        add_path_constraint = finch_prim.state_add_path_constraint,
        debug = finch_prim.state_debug,
        execute = finch_prim.state_execute,
        memory = finch_prim.state_memory,
        new = finch_prim.state_new,
        scalar = finch_prim.state_scalar,
        set_scalar = finch_prim.state_set_scalar,
        symbolize_and_eval = finch_prim.state_symbolize_and_eval,
        symbolize_expression = finch_prim.state_symbolize_expression,
    },

    symbolic_memory = {
        load = finch_prim.memory_load,
        new = finch_prim.memory_new,
        new_with_backing = finch_prim.memory_new_with_backing,
        store = finch_prim.memory_store
    }
}